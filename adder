#!/usr/bin/env python
from __future__ import annotations
import logging
import requests
import yaml
import logging.config as log_config
from utils import *
from devices.fmc import AdderFMC
from devices.netbox import AdderNetbox
from pprint import pprint
import argparse

# Logging config
with open("./log/log.conf", "r") as f:
    try:
        contents = yaml.safe_load(f)
    except yaml.YAMLError:
        raise
    log_config.dictConfig(contents)

# Logging enable
logger = logging.getLogger(__name__)


def parse_arguments() -> argparse.Namespace:
    """Here we parse all our arguments, get the values and return them so we can pass into the main func"""
    parser = argparse.ArgumentParser(
        description="Adds DIA IP addresses from Netbox into the Cisco Firewalls and SROS routers"
    )
    deploy_rollback_group = parser.add_mutually_exclusive_group()
    group_get_ips = parser.add_mutually_exclusive_group()

    parser.add_argument(
        "--target",
        type=str,
        help="The name of the object group you want to update. Defaults to 'Store-DIA-PROD'",
    )
    group_get_ips.add_argument(
        "--site",
        type=str,
        help="The five letter site code you are trying to deploy. Site must be built in netbox for this to work.",
    )
    group_get_ips.add_argument(
        "--ip",
        type=str,
        help="Use this to manually specify the IP addresses you are trying to apply to the firewalls. Separate with spaces. Doesn't mix with --site",
        nargs="+",
    )
    deploy_rollback_group.add_argument(
        "--deploy",
        help="Push pending changes from the FMC to the FTDs",
        action="store_true",
    )
    deploy_rollback_group.add_argument(
        "--rollback",
        help="Rolls back the most recent change made to the FTD's DIA object-group. Cannot mix with --deploy",
        action="store_true",
    )

    return parser.parse_args()


def populate_site(
    site_code: str, nb: AdderNetbox, fmc: AdderFMC, target: str = None
) -> None:
    """Wrapping up all the logic to get from invocation of the entire app to adding a whole site to the firewalls"""
    # First we do some input validation. Make sure that the argument passed to the function is a five-letter WFM site code.
    validate_site_code(site_code)

    if target == None:
        target = "Store-DIA-PROD"

    dia_ips = nb.get_dia_ip_addrs(site_code)
    logger.debug(f"Using this list of IPs: {dia_ips}")

    new_objects = fmc.create_host_objects(dia_ips)
    obj_group = fmc.get_netgroup_uuid(target)
    logger.debug(f"UUID of object group {site_code}: {obj_group}")

    fmc.update_object_group(obj_group, new_objects)
    pprint(f"These are the new objects added: {new_objects}")


def deploy_fmc(fmc: AdderFMC) -> tuple[requests.Response, requests.Response]:
    """If the --deploy flag is set, we will attempt to deploy changes to the ORD and DFW FTDs."""
    dfw_response = fmc.deploy_to_device(fmc.dfw_ftd)
    ord_response = fmc.deploy_to_device(fmc.ord_ftd)
    return (dfw_response, ord_response)


def populate_from_single(fmc: AdderFMC, arg_ips: list, target: str = None) -> None:
    """Skip the netbox! This lets you enter a list of IPs into adder and have them added to the FMC"""
    existing_ips = []
    new_ips = []

    if target == None:
        obj_group = "Store-DIA-PROD"
    else:
        obj_group = fmc.get_netgroup_uuid(target)

    for ip in arg_ips:
        logger.debug(f"Validating IPs passed to adder: {arg_ips}")
        _ = validate_ip(ip)

        try:
            fmc.check_host_exists(ip)
        except HostAlreadyExistsWarning:
            existing_ips.append(ip)
        else:
            new_ips.append(ip)

    for ip in existing_ips:
        fmc.update_group_from_existing_host(obj_group, ip)

    new_objects = fmc.create_host_objects(new_ips)
    fmc.update_object_group(obj_group, new_objects)


def rollback_fmc(fmc: AdderFMC) -> None:
    print("MOCK FUNC: rollback_fmc()")


def main(args):
    # Establish API connection object to FMC
    fmc = AdderFMC()

    # Establish API connection object to Netbox
    nb = AdderNetbox()

    deployable_devices = fmc.get_deployable_devices()
    for device in deployable_devices.json()["items"]:
        if device["name"] == fmc.ord_ftd:
            input(
                "The ORD FTD already has pending changes. ENTER to proceed, Ctrl-C to exit."
            )
            break

    for device in deployable_devices.json()["items"]:
        if device["name"] == fmc.dfw_ftd:
            input(
                "The DFW FTD already has pending changes. ENTER to proceed, Ctrl-C to exit."
            )
            break

    if args.site is not None:
        if args.target is not None:
            populate_site(args.site, nb, fmc, target=args.target)
        else:
            populate_site(args.site, nb, fmc)
        if args.deploy:
            _, _ = deploy_fmc(fmc)
    elif args.ip is not None:
        populate_from_single(fmc, args.ip, target=args.target)
        if args.deploy:
            deploy_fmc(fmc)
    elif args.deploy:
        deploy_fmc(fmc)
    elif args.rollback:
        rollback_fmc(fmc)


if __name__ == "__main__":
    args = parse_arguments()
    main(args)